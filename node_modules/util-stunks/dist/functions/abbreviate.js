"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const abbreviations = __importStar(require("../info/numbers.json"));
;
const abbreviate = (input, options = { display: 1, round: false }) => {
    if (isNaN(input))
        throw new TypeError('Parâmentro não é um número.');
    if (!input)
        return '0';
    let display = 1;
    let round = false;
    if (typeof options === 'object') {
        if (typeof options.display === 'number' &&
            options.display >= 0 &&
            options.display <= 2)
            display = options.display;
        if (typeof options.round === 'boolean')
            round = options.round;
    }
    ;
    let result = String(input);
    let calcDisplay = Math.pow(10, display);
    let abbr = Object.keys(abbreviations);
    for (let i = abbr.length - 1; i >= 0; i--) {
        const size = Math.pow(10, (i + 1) * 3);
        if (size <= input) {
            if (round)
                result = Math.round(input * calcDisplay / size) / calcDisplay + abbr[i];
            else
                result = Math.floor(input * calcDisplay / size) / calcDisplay + abbr[i];
            break;
        }
    }
    ;
    return result;
};
exports.default = abbreviate;
